name: Formatting your code
on:
  # Actually we are only interested in pushes to master and to branches with
  # open pull requests. We do not intercept pull_request events however,
  # because those are created only on the base repo and we are not allowed to
  # push to the head branch if it is in a fork. So we intercept all push events,
  # and then query whether the branch meets the above criteria.
  push:
jobs:
  run_formatting:
    name: Run fix_formatting.py
    runs-on: ubuntu-16.04 # clang-format has broken dependencies on ubuntu-latest
    steps:
    - name: Git info
      run: echo "::set-env name=BRANCH_NAME::${GITHUB_REF##*/}"
    - name: Checking relevance
      run: |
        if ! [ "$BRANCH_NAME" == "master" ]
        then
          forkname=${{ github.repository }}
          # grep returns 1 if $BRANCH_NAME is not found, but we want to log an error message before exiting
          set +e
          output=$(curl -i "https://api.github.com/repos/widelands/widelands/pulls?state=open&head=${forkname%%/*}:$BRANCH_NAME" | grep "$BRANCH_NAME")
          set -e
          if [ -z "$output" ]
          then
            echo "Branch $BRANCH_NAME in repository $forkname does not have an open pull request"
            exit 1
          fi
        fi
    - name: Installing python
      uses: actions/setup-python@v1
      with:
        python-version: 3.x
    - name: Installing formatting tools
      run: |
        sudo apt-get update
        sudo apt-get install clang-format
        pip install pyformat
    - name: Checkout
      uses: actions/checkout@v2
    - name: Invoking fix_formatting.py
      run: python3 ./utils/fix_formatting.py
    - name: Gathering changes
      run: |
        nrfiles=$(git status -s | wc -l)
        if [ $nrfiles == 0 ]
        then
          echo "Nothing to do"
        elif [ $nrfiles == 1 ]
        then
          echo "1 file formatted"
          nrfiles=$(git status -s)
          FILES="'${nrfiles#???}' was"
        else
          echo "$nrfiles files formatted"
          FILES="$nrfiles files were"
        fi
        echo "::set-env name=COMMIT_MESSAGE::\"$FILES automatically formatted.\""
    - name: Check for remote updates
      run: |
        git fetch -n origin
        head1=$(git merge-base $BRANCH_NAME origin/$BRANCH_NAME)
        head2=$(git rev-parse origin/$BRANCH_NAME)
        if [ $head1 == $head2 ]
        then
          echo "No remote changes"
        else
          echo "The remote branch was updated, cancelling build"
          exit 1
        fi
      # In theory, a new push can hit th branch in this brief delay between check
      # and push. But this is such a narrow time window that it's unlikely.
      # If it does happen, the last step will most likely fail with a "branches
      # have diverged" error without affecting the newer push.
    - name: Committing and pushing changes
      uses: stefanzweifel/git-auto-commit-action@v2.5.0
      with:
        commit_message: ${{ env.COMMIT_MESSAGE }}
        branch: ${{ env.BRANCH_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
